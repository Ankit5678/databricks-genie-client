from genie_client.config import PATGenieClientConfig
from genie_client.core.client import GenieClient
from genie_client.utils.env import get_config_from_env

# Get configuration from environment variables
config_dict = get_config_from_env()

system_prompt_template = '''
**Role**: Data interpreter for `sales and marketing` domain  
**Input**:  
1. User's natural language question  
2. SQL generated by Genie  
3. Executed query results  

**Response Rules**:  
1. **Answer Format**:  
   - Use **descriptive text** for single-value results (e.g., "Q2 revenue: $1.2M")  
   - Use **tables** for multi-row comparisons (e.g., "Top 5 products:")  
   - Combine **text + table** for insights + details (e.g., "Overall growth (Table 1), with exceptions noted")  
   - Always output valid markdown  

2. **Content Principles**:  
   - ❌ Never use: "I think", "in my opinion", "you should"  
   - ✅ Always use: "The data shows", "Results indicate", "Based on records"  
   - For ambiguous data: "No clear trend emerges from the data"  
   - Explain domain terms if needed (e.g., "LTV = lifetime customer value")  

3. **Bias Prevention**:  
   - Report disparities without judgment (e.g., "Region A: 15% growth | Region B: -3% growth")  
   - Use neutral comparatives: "higher than", "lower than" instead of "better/worse"
'''

user_prompt_template = '''
**Question**: {question}  
**Genie-Generated SQL**:  
```sql
{formatted_query_results}
'''

config = PATGenieClientConfig(
    personal_access_token=config_dict["personal_access_token"],
    databricks_url=config_dict['databricks_url'],
    workspace_id=config_dict['workspace_id'],
    enable_natural_language=True,
    model_endpoint_name=config_dict['model_endpoint_name'],
    system_prompt_template=system_prompt_template,
    user_prompt_template=user_prompt_template
)

client = GenieClient(config)


# Ask initial question
print("Asking initial question...")
response = client.ask_genie(
    "What was our revenue in May 2024?",
    space_id="01f05f2aaafb1f948cc1ccf4d1055295",
)

# print(response)
if response.success:
    print(f"\n✅ Success! Operation took {response.duration_ms:.2f} ms")
    print(f"Status: {response.status}")
    print(f"Attachments: {len(response.attachments)}")
    
    if response.results:
        print(f"\nResults ({response.results['row_count']} rows):")
        for row in response.results["data"][:5]:
            print(row)
    # Print response as a json object
    print("\nResponse:")
    print(response)
    print(response.natural_language_answer)
else:
    print(f"\n❌ Error: {response.error_message}")

# Ask follow-up question
if response.success and response.conversation_id:
    print("\nAsking follow-up question...")
    follow_up = client.ask_genie(
        question="Give me all the details and top 10 list records contributed to revenue in the same above time period; Explain how this data is related to revenue",
        space_id="01f05f2aaafb1f948cc1ccf4d1055295",
        follow_up=True,
        conversation_id=response.conversation_id
    )
    print(follow_up)
    print(follow_up.natural_language_answer)
    if follow_up.success:
        print("\n✅ Follow-up successful!")
        if follow_up.results:
            print(f"Retrieved {follow_up.results['row_count']} rows")
        with open("follow_up_response_1.json", "w") as f:
            f.write(follow_up.model_dump_json())
        f.close()
    else:
        print(f"\n❌ Follow-up failed: {follow_up.error_message}")

# Ask Second follow-up question
if response.success and response.conversation_id:
    print("\nAsking follow-up question...")
    follow_up = client.ask_genie(
        question="Provide me a description and a understanding on the data we have , that is being used so far in the conversation above.",
        space_id="01f05f2aaafb1f948cc1ccf4d1055295",
        follow_up=True,
        conversation_id=response.conversation_id
    )
    print(follow_up)
    print(follow_up.natural_language_answer)
    if follow_up.success:
        print("\n✅ Follow-up successful!")
        if follow_up.results:
            print(f"Retrieved {follow_up.results['row_count']} rows")
        with open("follow_up_response_2.json", "w") as f:
            f.write(follow_up.model_dump_json())
        f.close()
    else:
        print(f"\n❌ Follow-up failed: {follow_up.error_message}")